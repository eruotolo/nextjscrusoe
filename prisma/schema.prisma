generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        Int        @id @default(autoincrement())
    email     String     @unique
    name      String?
    lastName  String?
    phone     String?
    address   String?
    city      String?
    password  String
    image     String     @default("Hola")
    state     Int        @default(1)
    createdAt DateTime   @default(now())
    roles     UserRole[]
    Traffics  Traffics[]
    Partner   Partner[]
}

model Role {
    id        Int        @id @default(autoincrement())
    name      String     @unique
    state     Int        @default(1)
    createdAt DateTime   @default(now())
    users     UserRole[]
}

model UserRole {
    createdAt DateTime @default(now())
    id        Int      @id @default(autoincrement())
    userId    Int
    roleId    Int
    role      Role     @relation(fields: [roleId], references: [id])
    user      User     @relation(fields: [userId], references: [id])
}

model Country {
    id            Int             @id @default(autoincrement())
    code          String          @unique
    name          String          @unique
    cities        City[]
    airports      Airports[]
    shippingPorts ShippingPorts[]
    places        Places[]
    Ships         Ships[]
    createdAt     DateTime        @default(now())
    Partner       Partner[]
}

model City {
    id          Int       @id @default(autoincrement())
    countryCode String?
    name        String
    country     Country?  @relation(fields: [countryCode], references: [code], onDelete: Cascade, onUpdate: Cascade)
    createdAt   DateTime  @default(now())
    places      Places[]
    Partner     Partner[]

    @@index([name])
    @@index([countryCode])
}

model Airports {
    id          String   @id @default(uuid())
    geocode     String?
    name        String
    gcdiata     String
    gcdicao     String?
    latitude    Float?
    longitude   Float?
    codeCountry String?
    country     Country? @relation(fields: [codeCountry], references: [code], onDelete: Cascade, onUpdate: Cascade)
    createdAt   DateTime @default(now())

    @@index([name])
    @@index([codeCountry])
}

model ShippingPorts {
    id          String   @id @default(uuid())
    unCode      String?
    name        String
    latitude    Float?
    longitude   Float?
    codeCountry String?
    country     Country? @relation(fields: [codeCountry], references: [code], onDelete: Cascade, onUpdate: Cascade)
    createdAt   DateTime @default(now())

    @@index([name])
    @@index([codeCountry])
}

model Places {
    id           String   @id @default(uuid())
    name         String
    address      String?
    zipCode      String?
    latitude     Float?
    longitude    Float?
    codeCountry  String?
    country      Country? @relation(fields: [codeCountry], references: [code], onDelete: Cascade, onUpdate: Cascade)
    codeCity     Int?
    city         City?    @relation(fields: [codeCity], references: [id], onDelete: Cascade, onUpdate: Cascade)
    contactName  String?
    contactEmail String?
    contactPhone String?
    createdAt    DateTime @default(now())

    @@index([name])
    @@index([codeCountry])
    @@index([codeCity])
}

model TransportType {
    id                String               @id @default(uuid())
    name              String
    createdAt         DateTime             @default(now())
    incotermsRelarion IncotermsTransport[]

    @@index([name])
}

model Incoterms {
    id                String               @id @default(uuid())
    name              String
    code              String
    createdAt         DateTime             @default(now())
    transportRelation IncotermsTransport[]

    @@index([name])
    @@index([code])
}

model IncotermsTransport {
    id              String        @id @default(uuid())
    incotermsId     String
    transportTypeId String
    incoterms       Incoterms     @relation(fields: [incotermsId], references: [id], onDelete: Cascade)
    transportType   TransportType @relation(fields: [transportTypeId], references: [id], onDelete: Cascade)
    createdAt       DateTime      @default(now())
}

model Ships {
    id          String     @id @default(uuid())
    name        String
    code        String
    shipownerId String
    shipowner   Shipowner  @relation(fields: [shipownerId], references: [id], onDelete: Cascade)
    codeCountry String?
    country     Country?   @relation(fields: [codeCountry], references: [code], onDelete: Cascade, onUpdate: Cascade)
    shipsTypeId String?
    shipsType   ShipsType? @relation(fields: [shipsTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    createdAt   DateTime   @default(now())
}

model Shipowner {
    id        String   @id @default(uuid())
    name      String
    code      String
    ships     Ships[]
    createdAt DateTime @default(now())
}

model ShipsType {
    id        String   @id @default(uuid())
    name      String
    Ships     Ships[]
    createdAt DateTime @default(now())
}

model CommoditiesSection {
    id          String        @id @default(uuid())
    name        String
    commodities Commodities[]
    createdAt   DateTime      @default(now())

    @@index([name])
}

model Commodities {
    id                   String              @id @default(uuid())
    name                 String
    nameEnglish          String?
    dangerous            Boolean?
    perishable           Boolean?
    tariffPositional     String?
    commoditiesSectionId String?
    commoditiesSection   CommoditiesSection? @relation(fields: [commoditiesSectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    createdAt            DateTime            @default(now())

    @@index([name])
    @@index([nameEnglish])
}

model Traffics {
    id          String    @id @default(uuid())
    name        String?
    nameEnglish String?
    code        String?
    modifiedBy  Int?
    user        User?     @relation(fields: [modifiedBy], references: [id])
    createdAt   DateTime  @default(now())
    updatedAt   DateTime? @updatedAt

    @@index([name])
    @@index([nameEnglish])
}

model SupplierType {
    id        String                @id @default(uuid())
    name      String?
    createdAt DateTime              @default(now())
    partners  PartnerSupplierType[]

    @@index([name])
}

// Tipo de Socio
model PartnerType {
    id        String    @id @default(uuid())
    name      String?
    createdAt DateTime  @default(now())
    Partner   Partner[]

    @@index([name])
}

// Socios
model Partner {
    id                String                @id @default(uuid())
    partnerTypeId     String?
    partnerType       PartnerType?          @relation(fields: [partnerTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    name              String
    rut               String?
    socialReazon      String?
    taxId             String?
    address           String?
    zipCode           String?
    locations         String?
    codeCountry       String?
    country           Country?              @relation(fields: [codeCountry], references: [code], onDelete: Cascade, onUpdate: Cascade)
    codeCity          Int?
    city              City?                 @relation(fields: [codeCity], references: [id], onDelete: Cascade, onUpdate: Cascade)
    phone             String?
    email             String?
    scacCode          String?
    userId            Int?
    user              User?                 @relation(fields: [userId], references: [id])
    createdAt         DateTime              @default(now())
    updatedAt         DateTime?             @updatedAt
    contacts          Contact[]
    partnerCreditInfo PartnerCreditInfo?
    supplierTypes     PartnerSupplierType[]

    @@index([name])
    @@index([socialReazon])
}

// Tipo de Contacto
model ContactType {
    id             String    @id @default(uuid())
    name           String?
    createdAt      DateTime  @default(now())
    PartnerContact Contact[]

    @@index([name])
}

// Contacto
model Contact {
    id            String       @id @default(uuid())
    name          String?
    email         String?
    phone         String?
    contactTypeId String?
    contactType   ContactType? @relation(fields: [contactTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    partnerId     String? // Referencia al Partner
    partner       Partner?     @relation(fields: [partnerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    createdAt     DateTime     @default(now())

    @@index([name])
}

// Socio Credito
model PartnerCreditInfo {
    id                    String      @id @default(uuid())
    freightCreditTerm     String?
    freightCreditAmount   String?
    freightCreditCurrency String?
    freightCurrency       Currencies? @relation("FreightCurrency", fields: [freightCreditCurrency], references: [id], onDelete: Cascade, onUpdate: NoAction)
    termCreditExpenses    String?
    termCreditAmount      String?
    termCreditCurrency    String?
    termCurrency          Currencies? @relation("TermCurrency", fields: [termCreditCurrency], references: [id], onDelete: Cascade, onUpdate: Cascade)
    incomeAccountNumber   String?
    outgoingAccountNumber String?
    createdAt             DateTime    @default(now())
    partnerId             String?     @unique
    partner               Partner?    @relation(fields: [partnerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([id])
}

// Moneda General
model Currencies {
    id                 String              @id @default(uuid())
    code               String?
    name               String?
    symbol             String?
    createdAt          DateTime            @default(now())
    freightCreditInfos PartnerCreditInfo[] @relation("FreightCurrency")
    termCreditInfos    PartnerCreditInfo[] @relation("TermCurrency")
}

model PartnerSupplierType {
    id             Int          @id @default(autoincrement())
    partnerId      String
    partner        Partner      @relation(fields: [partnerId], references: [id], onDelete: Cascade)
    supplierTypeId String
    supplierType   SupplierType @relation(fields: [supplierTypeId], references: [id], onDelete: Cascade)
    createdAt      DateTime     @default(now())

    @@index([partnerId])
    @@index([supplierTypeId])
}
