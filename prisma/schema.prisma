generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  name      String?
  lastName  String?
  phone     String?
  address   String?
  city      String?
  password  String
  image     String     @default("Hola")
  state     Int        @default(1)
  createdAt DateTime   @default(now())
  roles     UserRole[]
}

model Role {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  state     Int        @default(1)
  createdAt DateTime   @default(now())
  users     UserRole[]
}

model UserRole {
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  userId    Int
  roleId    Int
  role      Role     @relation(fields: [roleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Country {
  id            Int             @id @default(autoincrement())
  code          String          @unique
  name          String          @unique
  cities        City[]
  airports      Airports[]
  shippingPorts ShippingPorts[]
  places        Places[]
  createdAt     DateTime        @default(now())
}

model City {
  id          Int      @id @default(autoincrement())
  countryCode String?
  name        String
  country     Country? @relation(fields: [countryCode], references: [code], onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime @default(now())
  places      Places[]

  @@index([name])
  @@index([countryCode])
}

model Airports {
  id          String   @id @default(uuid())
  geocode     String?
  name        String
  gcdiata     String
  gcdicao     String?
  latitude    Float?
  longitude   Float?
  codeCountry String?
  country     Country? @relation(fields: [codeCountry], references: [code], onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime @default(now())

  @@index([name])
  @@index([codeCountry])
}

model ShippingPorts {
  id          String   @id @default(uuid())
  unCode      String?
  name        String
  latitude    Float?
  longitude   Float?
  codeCountry String?
  country     Country? @relation(fields: [codeCountry], references: [code], onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime @default(now())

  @@index([name])
  @@index([codeCountry])
}

model Places {
  id           String   @id @default(uuid())
  name         String
  address      String?
  zipCode      String?
  latitude     Float?
  longitude    Float?
  codeCountry  String?
  country      Country? @relation(fields: [codeCountry], references: [code], onDelete: Cascade, onUpdate: Cascade)
  codeCity     Int?
  city         City?    @relation(fields: [codeCity], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contactName  String?
  contactEmail String?
  contactPhone String?
  createdAt    DateTime @default(now())

  @@index([name])
  @@index([codeCountry])
  @@index([codeCity])
}
